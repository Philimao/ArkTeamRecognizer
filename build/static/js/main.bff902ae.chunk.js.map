{"version":3,"sources":["TeamRecognizer.js","App.js","index.js"],"names":["TeamRecognizer","useState","ori","setOri","hough","setHough","low","setLow","high","setHigh","gapH","setGapH","gapHOffset","setGapHOffset","gapW","setGapW","charW","setCharW","startOCR","setStartOCR","ocr","setOcr","status","setStatus","progress","setProgress","a","canvasR","document","querySelectorAll","worker","createWorker","logger","m","parseFloat","console","log","load","loadLanguage","initialize","recognize","result","data","text","index","image","Image","onload","canvas","width","height","getContext","drawImage","undefined","src","useEffect","canvasAll","clear","input","gm","operation","output","sess","init","runOp","maxP","Math","max","lines","i","size","y","floor","shape","x","value","get","x0","y0","push","sort","b","slice","horizontal","vertical","length","line","fromParallelCoords","abs","angle","lineA","lineB","y1","y2","hL","tempGapH","xCorBreaks","crossLine","xCorArray","map","Intersection","breaks","ckmeans","totalVariance","cluster","variance","diffBreaks","xCors","mean","diffs","j","candidateWidth","item","tempGapW","tempCharW","emp","num","ctxR","xStart","textHeight","yLine1","textData","putImageData","whiteTensor","fill","imageTensor","canvasT","ctxT","iconSize","className","type","accept","onChange","evt","reader","FileReader","target","files","readAsDataURL","toString","setSample","Array","onClick","min","step","role","style","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bff902ae.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as gm from \"gammacv\";\nimport { mean, ckmeans, variance } from \"simple-statistics\";\nimport { createWorker } from \"tesseract.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default function TeamRecognizer() {\n  const [ori, setOri] = useState();\n  const [hough, setHough] = useState(false);\n  const [low, setLow] = useState(0.6);\n  const [high, setHigh] = useState(1);\n\n  const [gapH, setGapH] = useState();\n  const [gapHOffset, setGapHOffset] = useState(1.5);\n  const [gapW, setGapW] = useState();\n  const [charW, setCharW] = useState();\n\n  const [startOCR, setStartOCR] = useState(false);\n  const [ocr, setOcr] = useState();\n  const [status, setStatus] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n\n  async function OCR() {\n    if (ocr) return;\n    setStartOCR(true);\n    const canvasR = document.querySelectorAll(\"canvas\")[1];\n    const worker = createWorker({\n      logger: (m) => {\n        setProgress(parseFloat(m.progress));\n        setStatus(m.status);\n        console.log(m);\n      },\n    });\n    await worker.load();\n    await worker.loadLanguage(\"chi_sim\");\n    await worker.initialize(\"chi_sim\");\n    const result = await worker.recognize(canvasR);\n    console.log(result);\n    setOcr(result.data.text);\n  }\n\n  function reset() {\n    console.clear();\n    const canvas = document.querySelectorAll(\"canvas\")[2];\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(ori, 0, 0);\n  }\n\n  async function setSample(index) {\n    if (index === \"None\") return;\n    const image = new Image();\n    image.onload = () => {\n      const canvas = document.querySelectorAll(\"canvas\")[2];\n      canvas.width = image.width;\n      canvas.height = image.height;\n      canvas.getContext(\"2d\").drawImage(image, 0, 0);\n      setOcr(undefined);\n      setOri(image);\n    };\n    image.src = \"/images/team\" + index + \".jpg\";\n  }\n\n  function handleUpload(evt) {\n    const reader = new FileReader();\n    if (!evt.target.files[0]) return;\n    reader.readAsDataURL(evt.target.files[0]);\n    reader.onload = (evt) => {\n      const image = new Image();\n      image.onload = () => {\n        const canvas = document.querySelectorAll(\"canvas\")[2];\n        canvas.width = image.width;\n        canvas.height = image.height;\n        canvas.getContext(\"2d\").drawImage(image, 0, 0);\n        setOcr(undefined);\n        setOri(image);\n      };\n      image.src = evt.target.result.toString();\n    };\n  }\n\n  useEffect(() => {\n    const canvasAll = document.querySelectorAll(\"canvas\");\n    canvasAll[0].height = 0;\n    canvasAll[1].height = 0;\n  }, []);\n\n  useEffect(() => {\n    if (hough) {\n      reset();\n      const canvas = document.querySelectorAll(\"canvas\")[2];\n      const input = new gm.Tensor(\"uint8\", [canvas.height, canvas.width, 4]);\n      // image data to tensor\n      gm.canvasToTensor(canvas, input);\n\n      // build pipeline\n      let operation = gm.grayscale(input);\n      operation = gm.downsample(operation, 2, \"nearest\");\n      operation = gm.gaussianBlur(operation, 3, 3);\n      operation = gm.sobelOperator(operation);\n      operation = gm.cannyEdges(operation, low, high);\n      operation = gm.pcLines(operation, 2, 2, 2);\n      const output = gm.tensorFrom(operation);\n\n      // run the session\n      const sess = new gm.Session();\n      sess.init(operation);\n      sess.runOp(operation, 0, output);\n\n      const maxP = Math.max(canvas.height, canvas.width);\n      let lines = [];\n\n      for (let i = 0; i < output.size / 4; i += 1) {\n        const y = Math.floor(i / output.shape[1]);\n        const x = i - y * output.shape[1];\n        const value = output.get(y, x, 0);\n        const x0 = output.get(y, x, 1);\n        const y0 = output.get(y, x, 2);\n\n        if (value > 0.0) {\n          lines.push([value, x0, y0]);\n        }\n      }\n\n      // sort by line value\n      const numOfLines = 400;\n      lines = lines.sort((b, a) => a[0] - b[0]).slice(0, numOfLines);\n\n      const horizontal = [];\n      const vertical = [];\n\n      for (let i = 0; i < lines.length; i += 1) {\n        let line = new gm.Line();\n        line.fromParallelCoords(\n          lines[i][1] * 2,\n          lines[i][2] * 2,\n          canvas.width,\n          canvas.height,\n          maxP,\n          maxP / 2\n        );\n        if (Math.abs(line.angle - 90) > 89) {\n          // ~0\n          horizontal.push(line);\n        } else if (Math.abs(line.angle - 90) < 1) {\n          // ~90\n          vertical.push(line);\n        }\n      }\n\n      // sort horizontal lines by distance with center\n      horizontal.sort(\n        (lineA, lineB) =>\n          Math.abs((lineA.y1 + lineA.y2) / 2 - canvas.height / 2) -\n          Math.abs((lineB.y1 + lineB.y2) / 2 - canvas.height / 2)\n      );\n\n      // get the first line nearest center\n      const hL = horizontal[0];\n      // gm.canvasDrawLine(canvas, hL, \"rgba(0, 255, 0, 1.0)\");\n\n      // gapH is the gap distance between upper char and lower char cards\n      const tempGapH = Math.abs(hL.y1 + hL.y2 - canvas.height) + gapHOffset;\n      setGapH(tempGapH);\n      console.log(\"gapH height\", tempGapH);\n\n      // draw its mirror\n      // let mirrorY;\n      // if (hL.y1 > canvas.height / 2) {\n      //   mirrorY = (hL.y1 + hL.y2) / 2 - gapH;\n      // } else {\n      //   mirrorY = (hL.y1 + hL.y2) / 2 + gapH;\n      // }\n      // const mirror = new gm.Line([hL.x1, mirrorY, hL.x2, mirrorY]);\n      // gm.canvasDrawLine(canvas, mirror, \"rgba(0, 255, 0, 1.0)\");\n\n      // for vertical lines, it is represented by a intersection formula\n      // and the middle point has to be calculated by a intersection function\n      // refer to https://github.com/PeculiarVentures/GammaCV/issues/120\n      const crossLine = new gm.Line(\n        0,\n        canvas.height / 2,\n        canvas.width,\n        canvas.height / 2\n      );\n      const xCorArray = vertical.map(\n        (line) => gm.Line.Intersection(line, crossLine)[0]\n      );\n      // for (let x of xCorArray) {\n      //   const line = new gm.Line(x, 0, x, canvas.height);\n      //   gm.canvasDrawLine(canvas, line, \"rgba(0, 0, 255, 1.0)\");\n      // }\n\n      // use ckmeans to find the natural breaks\n      let xCorBreaks;\n      for (let i = 2; i < xCorArray.length; i++) {\n        const breaks = ckmeans(xCorArray, i);\n        let totalVariance = 0;\n        for (let cluster of breaks) {\n          totalVariance += variance(cluster);\n        }\n        // unsupervised learning\n        if (totalVariance < 20) {\n          xCorBreaks = breaks;\n          break;\n        }\n      }\n      // console.log(\"x cor breaks\", xCorBreaks);\n\n      // calc and sort all x cors\n      const xCors = xCorBreaks\n        .map((cluster) => mean(cluster))\n        .sort((a, b) => a - b);\n\n      // calc difference between one and another\n      const diffs = [];\n      for (let i = 0; i < xCors.length - 1; i++) {\n        for (let j = i + 1; j < xCors.length; j++) {\n          diffs.push(xCors[j] - xCors[i]);\n        }\n      }\n\n      // use ckmeans again to find the natural breaks\n      let diffBreaks;\n      for (let i = 2; i < diffs.length; i++) {\n        const breaks = ckmeans(diffs, i);\n        let totalVariance = 0;\n        for (let cluster of breaks) {\n          totalVariance += variance(cluster);\n        }\n        // unsupervised learning\n        if (totalVariance < 20) {\n          diffBreaks = breaks;\n          break;\n        }\n      }\n      const candidateWidth = diffBreaks\n        .sort((a, b) => b.length - a.length)\n        .map((item) => mean(item));\n      console.log(\"candidate gapW\", candidateWidth);\n\n      // empirical evidence\n      const emp = {\n        gapW: 2 * tempGapH,\n        charW: 8 * tempGapH,\n      };\n      console.log(emp);\n      let tempGapW, tempCharW;\n      for (let num of candidateWidth) {\n        if (!tempGapW && variance([num, emp[\"gapW\"]]) < emp[\"gapW\"]) {\n          tempGapW = num;\n        } else if (!tempCharW && variance([num, emp[\"charW\"]]) < emp[\"charW\"]) {\n          tempCharW = num;\n        } else if (tempGapW && tempCharW) {\n          break;\n        }\n      }\n      setGapW(tempGapW);\n      setCharW(tempCharW);\n      console.log(\"gapW width\", tempGapW, \"char width\", tempCharW);\n    }\n  }, [hough, ori, low, high, gapHOffset]);\n\n  useEffect(() => {\n    // extract text\n    if (gapW && gapH && charW) {\n      const canvas = document.querySelectorAll(\"canvas\")[2];\n      const canvasR = document.querySelectorAll(\"canvas\")[1];\n      const ctxR = canvasR.getContext(\"2d\");\n\n      const xStart = canvas.width / 2 - 3.5 * charW - 3 * gapW;\n      const textHeight = 2.7 * gapH;\n      const yLine1 = canvas.height / 2 - textHeight;\n\n      canvasR.height = textHeight * 2;\n      canvasR.width = charW * 6;\n\n      let x = xStart,\n        y = yLine1;\n      for (let i = 0; i < 12; i++) {\n        const textData = gm.getImageData(canvas, x, y, charW, textHeight);\n        x += charW + gapW;\n        if (i === 5) {\n          x = xStart;\n          // another empirical parameter that the ratio char card is fixed\n          y += charW * 2.336;\n        }\n        if (i < 6) {\n          ctxR.putImageData(textData, i * charW, 0);\n        } else {\n          ctxR.putImageData(textData, (i - 6) * charW, textHeight);\n        }\n      }\n\n      // invert color\n      const whiteTensor = new gm.Tensor(\"uint8\", [\n        canvasR.height,\n        canvasR.width,\n        4,\n      ]);\n      whiteTensor.data.fill(255);\n      const imageTensor = new gm.Tensor(\"uint8\", [\n        canvasR.height,\n        canvasR.width,\n        4,\n      ]);\n      // image data to tensor\n      gm.canvasToTensor(canvasR, imageTensor);\n      const operation = gm.sub(whiteTensor, imageTensor);\n      const output = gm.tensorFrom(operation);\n\n      const sess = new gm.Session();\n      sess.init(operation);\n      sess.runOp(operation, 0, output);\n\n      gm.canvasFromTensor(canvasR, output);\n    }\n  }, [gapW, gapH, charW]);\n\n  useEffect(() => {\n    // extract skill icons\n    if (gapW && gapH && charW) {\n      const canvas = document.querySelectorAll(\"canvas\")[2];\n      const canvasT = document.querySelectorAll(\"canvas\")[0];\n      const ctxT = canvasT.getContext(\"2d\");\n\n      const iconSize = charW / 3.4516;\n      const xStart = canvas.width / 2 - 2.865 * charW - 3 * gapW;\n      const yLine1 = canvas.height / 2 - charW / 1.671;\n\n      canvasT.height = iconSize;\n      canvasT.width = iconSize * 12;\n\n      let x = xStart,\n        y = yLine1;\n      for (let i = 0; i < 12; i++) {\n        const textData = gm.getImageData(canvas, x, y, iconSize, iconSize);\n        x += charW + gapW;\n        if (i === 5) {\n          x = xStart;\n          // another empirical parameter that the ratio char card is fixed\n          y += charW * 2.336;\n        }\n        ctxT.putImageData(textData, i * iconSize, 0);\n      }\n    }\n  }, [gapW, gapH, charW]);\n\n  return (\n    <div className=\"container py-4\">\n      <h2 className=\"mb-4\">Arknights Team Recognizer</h2>\n\n      <div className=\"mb-4\">\n        <h5 className=\"mb-2\">Step 1: choose an image</h5>\n        <label className=\"form-label\">Upload your own team screenshot</label>\n        <input\n          className=\"form-control mb-3\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleUpload}\n        />\n        <div className=\"mb-3\">\n          <label className=\"form-label\">\n            Or use our provided sample images\n          </label>\n          <select\n            className=\"form-select\"\n            onChange={(evt) => setSample(evt.target.value)}\n          >\n            <option value=\"None\">None</option>\n            {new Array(7).fill(0).map((item, index) => (\n              <option value={index} key={index}>\n                {\"Team \" + index}\n              </option>\n            ))}\n          </select>\n        </div>\n        <button\n          className=\"btn btn-outline-primary me-3\"\n          onClick={() => setHough(true)}\n        >\n          Split\n        </button>\n      </div>\n\n      {hough ? (\n        <div className=\"mb-4\">\n          <h5>\n            Step 2: adjust the params to render a correct crop of op names then\n            start OCR\n          </h5>\n          <div className=\"d-flex\">\n            <label className=\"form-label me-3\">\n              Canny Low Threshold\n              <input\n                className=\"form-control\"\n                type=\"number\"\n                min={0}\n                max={1}\n                step={0.05}\n                value={low}\n                onChange={(evt) => setLow(parseFloat(evt.target.value))}\n              />\n            </label>\n            <label className=\"form-label me-3\">\n              Canny High Threshold\n              <input\n                className=\"form-control\"\n                type=\"number\"\n                min={0}\n                max={1}\n                step={0.05}\n                value={high}\n                onChange={(evt) => setHigh(parseFloat(evt.target.value))}\n              />\n            </label>\n            <label className=\"form-label me-3\">\n              Gap H offset\n              <input\n                className=\"form-control\"\n                type=\"number\"\n                min={-5}\n                max={5}\n                step={0.5}\n                value={gapHOffset}\n                onChange={(evt) => setGapHOffset(parseFloat(evt.target.value))}\n              />\n            </label>\n          </div>\n          <button className=\"btn btn-outline-primary me-3\" onClick={OCR}>\n            OCR\n          </button>\n        </div>\n      ) : null}\n\n      {hough && startOCR ? (\n        <div className=\"mb-4\">\n          <div className=\"form-label mb-3\">{\"Status: \" + status}</div>\n          <label className=\"form-label me-3s\">Progress</label>\n          <div className=\"progress mb-3\">\n            <div\n              className=\"progress-bar progress-bar-striped progress-bar-animated\"\n              role=\"progressbar\"\n              style={{ width: progress * 100 + \"%\" }}\n            >\n              {progress * 100 + \"%\"}\n            </div>\n          </div>\n          {ocr ? (\n            <div>\n              Result: <strong>{ocr}</strong>\n            </div>\n          ) : null}\n        </div>\n      ) : null}\n      <div>\n        <canvas />\n      </div>\n      <div>\n        <canvas />\n      </div>\n      <div>\n        <canvas />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport TeamRecognizer from \"./TeamRecognizer\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <TeamRecognizer />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}